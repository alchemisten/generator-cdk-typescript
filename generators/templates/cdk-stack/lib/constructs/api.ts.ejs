import { Construct } from '@aws-cdk/core';
import { Table as DynamoTable } from '@aws-cdk/aws-dynamodb';
import { Code, Function as LambdaFunction, Runtime } from '@aws-cdk/aws-lambda';
import { ARecord, RecordTarget } from '@aws-cdk/aws-route53';
import {
  Cors,
  DomainName,
  EndpointType,
  LambdaIntegration,
  RestApi,
  SecurityPolicy, TokenAuthorizer
} from '@aws-cdk/aws-apigateway';
import { ApiGatewayDomain } from '@aws-cdk/aws-route53-targets';
import { EnvironmentNames } from '../../../src/lambdas/shared/constants';

export interface <%= projectName %>APIProps {
  stage: string;
  offersDatabase: DynamoTable;
  zoneDistribution: ZoneDistribution;
}

export class <%= projectName %>API extends Construct {
  constructor( scope: Construct, id: string, props: <%= projectName %>APIProps ) {
    super( scope, id );

    const {
      stage,
      offersDatabase,
      zoneDistribution
    } = props;

    const runtime = Runtime.NODEJS_12_X;


    const restApi = new RestApi( this, `<%= projectNameLispCase %>-api-${stage}`, {
      deployOptions: {
        stageName: stage,
      },
      defaultCorsPreflightOptions: {
        allowOrigins: Cors.ALL_ORIGINS,
        allowMethods: Cors.ALL_METHODS
      }
    } );

    // domain configuration
    const apiDomain = new DomainName( this, 'api-domain', {

    } );

    // example api function
    const exampleResource = restApi.root.addResource( 'example' );

    const getExampleData = new LambdaFunction(this, 'getExampleData', {
      runtime,
      handler: 'index.handler',
      code: Code.fromAsset( 'lib/lambdas/example-lambda' ),
      environment: {
        [EnvironmentNames.OFFERS_TABLE]: offersDatabase.tableName
      },
    });

    exampleResource.addMethod('GET', new LambdaIntegration(getExampleData), {
      //example
    });


  }
}
