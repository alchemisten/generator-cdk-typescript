import { Construct } from '@aws-cdk/core';
import { Table as DynamoTable } from '@aws-cdk/aws-dynamodb';
import { Code, Function as LambdaFunction, Runtime } from '@aws-cdk/aws-lambda';
import { ARecord, RecordTarget } from '@aws-cdk/aws-route53';
import {
  Cors,
  DomainName,
  EndpointType,
  LambdaIntegration,
  RestApi,
  SecurityPolicy, TokenAuthorizer
} from '@aws-cdk/aws-apigateway';
import { ApiGatewayDomain } from '@aws-cdk/aws-route53-targets';
import { ZoneDistribution } from './zone-distribution';
import { EnvironmentNames } from '../../../src/lambdas/shared/constants';
import { AccountRecovery, UserPool } from '@aws-cdk/aws-cognito';

export interface <%= projectName %>APIProps {
  stage: string;
  offersDatabase: DynamoTable;
  zoneDistribution: ZoneDistribution;
}

export class <%= projectName %>API extends Construct {
  constructor( scope: Construct, id: string, props: <%= projectName %>APIProps ) {
    super( scope, id );

    const {
      stage,
      offersDatabase,
      zoneDistribution
    } = props;

    const runtime = Runtime.NODEJS_12_X;


    const restApi = new RestApi( this, `<%= projectNameLispCase %>-api-${stage}`, {
      deployOptions: {
        stageName: stage,
      },
      defaultCorsPreflightOptions: {
        allowOrigins: Cors.ALL_ORIGINS,
        allowMethods: Cors.ALL_METHODS
      }
    } );

    // domain configuration
    const apiDomain = new DomainName( this, 'api-domain', {
      domainName: zoneDistribution.apiDomainName,
      certificate: zoneDistribution.apiCertificate,
      endpointType: EndpointType.EDGE,
      securityPolicy: SecurityPolicy.TLS_1_2
    } );

    apiDomain.addBasePathMapping( restApi, { basePath: '' } );

    const record = new ARecord( this, 'api-record', {
      zone: zoneDistribution.apiHostedZone,
      recordName: zoneDistribution.apiDomainName,
      target: RecordTarget.fromAlias( new ApiGatewayDomain( apiDomain ) )
    } );

    const userPool = new UserPool(this, 'userpool', {
      userPoolName: `<%= projectNameLispCase %>-${stage}`,
      accountRecovery: AccountRecovery.EMAIL_ONLY,
      passwordPolicy: {
        minLength: 6,
        requireUppercase: true,
        requireSymbols: true,
        requireDigits: true
      },
      selfSignUpEnabled: true,
      signInAliases: {
        username: true,
        preferredUsername: true, // TODO CHECK if this is correct...
        email: true
      }
    });

    const managementAppClient = userPool.addClient('<%= projectNameLispCase %>-app-client', {

    });

    const authorizerFunction = new LambdaFunction(this, 'authorizer', {
      runtime,
      handler: 'index.handler',
      code: Code.fromAsset( 'lib/lambdas/api-authorizer' ),
      environment: {
        [EnvironmentNames.AUTH_USER_POOL_ID]: userPool.userPoolId,
        [EnvironmentNames.AUTH_APP_CLIENT_ID]: managementAppClient.userPoolClientId
      }
    });

  }
}
